from dotenv import load_dotenv
from supabase import create_client
from pydantic import BaseModel
import os
import requests

load_dotenv()

EXTERNAL_API_BASE = "https://liutentor.lukasabbe.com/api/courses"
url = os.getenv("SUPABASE_URL")
key = os.getenv("SUPABASE_SERVICE_KEY")
supabase = create_client(url, key)

my_course_codes = [
    "702G22",
    "723G70",
    "725G28",
    "725G49",
    "725G53",
    "725G64",
    "725G90",
    "725G93",
    "725G95",
    "725G97",
    "725G99",
    "726G35",
    "729A27",
    "729G15",
    "729G17",
    "729G21",
    "729G28",
    "729G43",
    "729G49",
    "729G86",
    "732A54",
    "732A57",
    "732A61",
    "732A62",
    "732A63",
    "732A75",
    "732A90",
    "732A91",
    "732A93",
    "732A97",
    "732G01",
    "732G04",
    "732G05",
    "732G16",
    "732G19",
    "732G20",
    "732G21",
    "732G25",
    "732G26",
    "732G30",
    "732G38",
    "732G40",
    "732G42",
    "732G43",
    "732G45",
    "732G46",
    "732G51",
    "732G60",
    "732G70",
    "732G71",
    "732G81",
    "764G06",
    "764G08",
    "8LAG21",
    "8LAG31",
    "91MA12",
    "91MA13",
    "92MA12",
    "BML401",
    "ETE306",
    "ETE325",
    "NBIA47",
    "NKEA02",
    "NKEA04",
    "NKEC16",
    "TADI31",
    "TAIU05",
    "TAIU06",
    "TAIU10",
    "TAMS11",
    "TAMS15",
    "TAMS17",
    "TAMS24",
    "TAMS46",
    "TAMS65",
    "TAMS79",
    "TANA21",
    "TAOP07",
    "TAOP24",
    "TAOP33",
    "TAOP52",
    "TAOP61",
    "TAOP62",
    "TAOP88",
    "TAOP89",
    "TATA16",
    "TATA24",
    "TATA27",
    "TATA31",
    "TATA32",
    "TATA41",
    "TATA42",
    "TATA43",
    "TATA44",
    "TATA45",
    "TATA54",
    "TATA57",
    "TATA64",
    "TATA65",
    "TATA67",
    "TATA69",
    "TATA71",
    "TATA72",
    "TATA73",
    "TATA76",
    "TATA77",
    "TATA79",
    "TATA80",
    "TATA82",
    "TATA83",
    "TATA91",
    "TATB01",
    "TATB04",
    "TATM38",
    "TATM79",
    "TDAB01",
    "TDDA69",
    "TDDB44",
    "TDDB68",
    "TDDC17",
    "TDDC74",
    "TDDC75",
    "TDDC77",
    "TDDC78",
    "TDDC88",
    "TDDC90",
    "TDDC93",
    "TDDD01",
    "TDDD02",
    "TDDD04",
    "TDDD07",
    "TDDD08",
    "TDDD12",
    "TDDD14",
    "TDDD17",
    "TDDD20",
    "TDDD25",
    "TDDD37",
    "TDDD41",
    "TDDD43",
    "TDDD46",
    "TDDD48",
    "TDDD55",
    "TDDD56",
    "TDDD65",
    "TDDD66",
    "TDDD72",
    "TDDD74",
    "TDDD81",
    "TDDD82",
    "TDDD85",
    "TDDD86",
    "TDDD88",
    "TDDD93",
    "TDDE07",
    "TDDE09",
    "TDDE17",
    "TDDE22",
    "TDDE24",
    "TDDE31",
    "TDDE34",
    "TDDE35",
    "TDDE44",
    "TDDE55",
    "TDDE60",
    "TDDE65",
    "TDDI03",
    "TDDI08",
    "TDEI19",
    "TDIU11",
    "TDIU16",
    "TDIU25",
    "TDP002",
    "TDP004",
    "TDP007",
    "TDP030",
    "TDTS01",
    "TDTS04",
    "TDTS06",
    "TDTS07",
    "TDTS08",
    "TDTS10",
    "TDTS11",
    "TDTS21",
    "TEAE01",
    "TEAE04",
    "TEIE17",
    "TEIM32",
    "TEIO04",
    "TEIO19",
    "TEIO23",
    "TFBI11",
    "TFFY54",
    "TFYA12",
    "TFYA13",
    "TFYA87",
    "TFYA93",
    "TFYB04",
    "TFYB05",
    "TKMJ51",
    "TMEL08",
    "TMES44",
    "TMHL07",
    "TMKM86",
    "TMKT39",
    "TMME12",
    "TMME13",
    "TMME27",
    "TMME28",
    "TMMI17",
    "TMMI46",
    "TMMV04",
    "TMMV11",
    "TMTK39",
    "TNA001",
    "TNA002",
    "TNA003",
    "TNA004",
    "TNA006",
    "TNE043",
    "TNIU19",
    "TNIU22",
    "TNSL05",
    "TNSL08",
    "TNSL18",
    "TPPE13",
    "TPPE24",
    "TPPE29",
    "TPPE32",
    "TSDT18",
    "TSEA22",
    "TSEA28",
    "TSIT02",
    "TSKS10",
    "TSKS24",
    "TSRT08",
    "TSRT09",
    "TSRT12",
    "TSRT19",
    "TSRT21",
    "TSRT22",
    "TSRT93",
]


class Course(BaseModel):
    courseCode: str
    courseNameSwe: str
    courseNameEng: str


def get_course_data(course_code: str) -> Course | None:
    api_url = f"{EXTERNAL_API_BASE}/{course_code}"
    try:
        response = requests.get(api_url, timeout=10)
        if response.status_code == 404:
            return None
        response.raise_for_status()
        data = response.json()
        return Course.model_validate(data)
    except requests.exceptions.RequestException as e:
        print(f"Error fetching {course_code}: {e}")
        return None


def insert_courses_into_supabase():
    for course_code in my_course_codes:
        course_data = get_course_data(course_code)
        if course_data is None:
            continue

        print("Inserting course for course code: ", course_code)
        inserted_course = (
            supabase.table("courses")
            .upsert(
                {
                    "course_code": course_data.courseCode,
                    "course_name_swe": course_data.courseNameSwe,
                    "course_name_eng": course_data.courseNameEng,
                }
            )
            .execute()
        )
        print("Inserted data: ", inserted_course.data)


insert_courses_into_supabase()
